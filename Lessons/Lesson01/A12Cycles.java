/*
Урок 1. Знакомство с языком программирования Java
https://gb.ru/lessons/404312
 * 
 * 01:25:10
Циклы

Цикл — это многократное выполнение одинаковой последовательности действий.
В java доступны следующие циклы:

● цикл while;
● цикл do while;
● цикл for; и его модификация for in
 */

package JavaCourse.Lesson01;

public class A12Cycles {
    public static void main(String[] args) {
        /*
         * Цикл while
         */
        int value = 321;
        int count = 0;

        while (value != 0) {
            value /= 10;
            count++;
        }
        System.out.println(count);

        /*
         * Цикл "do, while"
         * (цикл с пост условием)
         */
        int value1 = 321; // тип данных (int) перед "value" необязателен (?)
        int count1 = 0;  // тип данных (int) перед "count" необязателен (?)

        do {
            value1 /= 10;
            count1++;
        } while (value1 != 0);   // пост условие, цикл сначала делает,
                                // потом проверяет
                                // применение зависит от поставленной задачи 
        System.out.println(count1);


        /*
         * 01:32:00
         * цикл for и его модификация for in
         */
        int s = 0;
        for (int i = 1; i <= 10; i++) {
            s += i;
        }
        System.out.println(s);  
        
        /*
         * Вложенные циклы
         */
        for (int i = 0; i < 5; i++) {
            for (int j = 0; j < 5; j++) {
                System.out.print("* ");
            }
            System.out.println();
        }
        // * * * * *
        // * * * * *
        // * * * * *
        // * * * * *
        // * * * * *  
        
        /*
         * for :
         * Работает только для коллекций
         */
        int arr[] = new int[10];
        for (int item : arr) {
            System.out.printf("%d ", item);
        }
        System.out.println();
        
        /*
         * пример с экрана
         */
        int[] arr1 = new int[] {1,2,3,4,5,77};
        for (int i = 0; i < arr1.length; i++) {
            arr1[i] = 10; // проходим фором по индексам, поэтому можем передать
                     // элементам массива любое значение, например, 10
        }
    
        for (int item : arr1) {
            item = 13; // такое присаивание не допустимо, т.к.
                   // сначала значения элементов массива 
                   // будут заменены на число 13,
                   // но при повторе, цикл возвратит массив с прежними значениями,
                   // т.к. "item" не работает с итерируемым объектом - коллекцией 
            System.out.println(item); // "item" (?)
        }
        for (int item : arr1) {
            item = 13;
            System.out.println(item);
        } 

        /*
        01:26:45
        Циклы continue, break

        Операторы для управления циклами — continue и break.
        Выполнение следующей итерации цикла — continue.
        Прерывание текущей итерации цикла — break. 
        * ближайшего к оператору

        * Цикл continue
        */
        for (int i = 0; i < 10; i++) {
            if (i % 2 == 0) // пропуск чётных чисел
            if (i % 2 != 0) // пропуск не чётных чисел

            { // ставить скобки для одного оператора необязательно
                continue; // пропуск указанного в условии цикла
            }
            System.out.println(i);
        }
    
        /*
         * Цикл break
         */
        for (int i = 0; i < 10; i++) {
            if (i % 2 == 0) {
            for (int q = 0; q < 5; q++) {
                if (i % 2 != 0) 
                break; // завершение для внутреннего цикла (q)
            }
            break; // завершение для внешнего цикла (i)
            }
            System.out.println();  
        }
    }
}
/*
P.S.
Операторы "continue" и "break" - это отсылка 
к оператору безусловного перехода "go to",
применение которго считается неприемлемым,
потому желательно избегать данных операторов,
кроме тех случаев, когда их использование,
действительно, необходимо или улучшает код, 
делая его, например, значительно короче.
 */
